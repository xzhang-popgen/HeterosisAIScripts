initialize() {
	defineConstant("dominance", 0); //recessive = 0; additive = 0.5; 
	defineConstant("n", 10); //scaling factor
	defineConstant("m4s", 0.01*n); //if m4s>0, adaptive introgression; else, deleterious null

    initializeMutationRate(1.5e-8*n);
	initializeTreeSeq();
	//nonsynonymous drawn from a DFE from Kim et al.
	// importantly, SLiM computes the fitness of the heterozygote and homozygote as 1+sh and 1+s
	// dadi and others compute it as 1+2sh and 1+2s
    initializeMutationType("m1", dominance, "g", -0.01314833*n, 0.186);
	// initializeMutationType("m1", 0.5, "f", 0.0);
	//synonymous -- assumed neutral here
	initializeMutationType("m2", 0.5, "f", 0.0);
	//noncoding -- assumed neutral here
	initializeMutationType("m3", 0.5, "f", 0.0);
	//beneficial -- for the time being, is left out
	initializeMutationType("m4", 0.5, "f", 0.01*n); //adaptive 	
	//genomic element: exon and uses a mixture of syn and nonsyn at a 1:2.31 ratio (Huber et al.)
	initializeGenomicElementType("g1", c(m2,m1), c(1.0,2.31));
	//genomic element: intron
	initializeGenomicElementType("g2", c(m3), c(1.0));
	//genomic element: intergenic
	initializeGenomicElementType("g3", c(m3), c(1.0));		
    //read in exon and recomb info
    info_lines = readFile("/u/home/x/xinjunzh/data/Slim_3/calculate_sumstats/regions/sim_seq_info_bnc2.txt");
    
	//recombination
    rec_ends = NULL;
    rec_rates = NULL;
    for (line in info_lines[substr(info_lines, 0, 2) == "rec"])
    {
        components = strsplit(line, " ");
        rec_ends = c(rec_ends, asInteger(components[1]));
        rec_rates = c(rec_rates, asFloat(components[2]));
    }
    
    //multiply rec rates by scaling factor
    initializeRecombinationRate(0.5*(1-(1-2*rec_rates)^n), rec_ends);
    
    //exons
    for (line in info_lines[substr(info_lines, 0, 2) == "exo"])
    {
        components = strsplit(line, " ");
        exon_starts = asInteger(components[1]);
        exon_ends = asInteger(components[2]);
        initializeGenomicElement(g1, exon_starts, exon_ends);
    }


    for (line in info_lines[substr(info_lines, 0, 2) == "cnc"])
    {
        components = strsplit(line, " ");
        cnc_starts = asInteger(components[1]);
        cnc_ends = asInteger(components[2]);
        initializeGenomicElement(g3, cnc_starts, cnc_ends);
    }

    for (line in info_lines[substr(info_lines, 0, 2) == "neu"])
    {
        components = strsplit(line, " ");
        neu_starts = asInteger(components[1]);
        neu_ends = asInteger(components[2]);
        initializeGenomicElement(g2, neu_starts, neu_ends);
    }

}



//burn in
1 early() {
    defineConstant("simnum", getSeed());
    setSeed(getSeed() + 27126);
    sim.addSubpop("p1", asInteger(10000/n));
    m1.convertToSubstitution = T;
}

10000 early() { // after burn-in, split populations into two: p1 and p2
    sim.addSubpopSplit("p2", asInteger(10000/n), p1);
    p1.setSubpopulationSize(asInteger(10000/n));
    
    // this also isnt necessary, but sets the migration rates to 0
	p1.setMigrationRates(c(p2),c(0.0)); //migration rate INTO p1
	p2.setMigrationRates(c(p1),c(0.0)); //migration rate INTO p2
	
}

10010 late() { 
	if(m4s != 0.0){
		sim.outputFull("/u/home/x/xinjunzh/data/Slim_3/calculate_sumstats/sim_candidates/temp/" + simnum + ".txt"); 
		target = sample(p1.genomes, 1); 
		target.addNewDrawnMutation(m4, 2500000); //random mutation in the middle of the segment
	}
} 

10010: late() { 
	if(m4s != 0.0){
		mut = sim.mutationsOfType(m4); 
		if (size(mut) == 1) { 
			if (sim.mutationFrequencies(NULL, mut) > 0.1) { 
				sim.deregisterScriptBlock(self); 
			} 
		} 
		else { 
			sim.readFromPopulationFile("/u/home/x/xinjunzh/data/Slim_3/calculate_sumstats/sim_candidates/temp/" + simnum + ".txt"); 
			setSeed(getSeed() + 1); 
			target = sample(p1.genomes, 1); 
			target.addNewDrawnMutation(m4, 2500000); 
		} 
	}
} 

11000 { sim.addSubpopSplit("p3", asInteger(1000/n), p2); } 

11000 late(){ 
	p2.setSubpopulationSize(asInteger(10000/n)); //african 
	p3.setSubpopulationSize(asInteger(1000/n)); //non-african 
} 

11995 early() {
    p2.setSubpopulationSize(asInteger(10000/n));
}

11999 late() {
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	p1.outputMSSample(100); //pre-admixed archaic 
	p2.outputMSSample(100); //african 
	p3.outputMSSample(100); //non-african 

}

 
12000 early(){ 
    p1.setMigrationRates(c(p3),c(0.00)); //migration rate INTO p1
    p3.setMigrationRates(c(p1),c(0.1)); //migration rate INTO p2
} 

12001 early() { 
	p3.setMigrationRates(p1, 0.00); 
	p1.setMigrationRates(p3, 0.00); 
	p1.setSubpopulationSize(asInteger(10000/n)); //african 
	p3.setSubpopulationSize(asInteger(1000/n)); //non-african 
} 


13000 late(){
	p1.outputMSSample(100); //archaic 
	p2.outputMSSample(100); //african 
	p3.outputMSSample(100); //non-african 
	sim.treeSeqOutput("/u/home/x/xinjunzh/data/Slim_3/calculate_sumstats/sim_candidates/tree/neg_m0.trees");
    if (m4s != 0.0){
        p4g = p4.genomes;
		adapt = sim.mutationsOfType(m4);
		hasAdapt = p4g.containsMutations(adapt);
		containing = p4g[hasAdapt];
		p4ind = containing.size();
		catn("FREQm4_1: " + p4ind/p4g.size());
    }	
}
